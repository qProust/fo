// Copyright 2018 Alex Browne. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package importgo

import (
	"github.com/qProust/fo/ast"
)

type List[T] []T

func NewList[T] () List[T] {
	return List[T]{}
}

func (l List[T]) Head() T {
	if len(l) > 0 {
		return l[0]
	}
	var x T
	return x
}

func (l List[T]) Append(v T) List[T] {
	var result List[T] = make([]T, len(l))
	result = append(result, v)
	return result
}

func main() {
	list := NewList[*ast.Ident]()
	list = list.Append(ast.NewIdent(""))
	var _ *ast.Ident = list.Head()
}
